
library 'shared-lib-int@main'
//@Library("shared-lib-int") _
import hudson.*;

//dict
//generic-build("snykToken","telegramToken","polybot","dockerhub")


pipeline {

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        //retry(2)
        timeout(time: 3, unit: 'MINUTES')
    }

    agent {
    kubernetes {

      label 'jenkins-eks-pod'
      defaultContainer 'jenkins-agent'
      cloud 'EKS'

      yaml '''
        apiVersion: v1
        kind: Pod

        spec:
          serviceAccountName: jenkins-admin
          securityContext:
            runAsUser: 0
            fsGroup: 0
            runAsNonRoot: 0
          containers:
          - name: jenkins-agent
            image:  019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:jenkins
            imagePullPolicy: Always
            volumeMounts:
             - name: jenkinsagent-pvc
               mountPath: /var/run/docker.sock
            tty: true
          volumes:
          - name: jenkinsagent-pvc
            hostPath:
              path: /var/run/docker.sock
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
        '''
    }
  }



//    agent {label 'ec2-fleet' }





    //insert credential to environment variable
    //insert to specific environment variable (must to this name: SNYK_TOKEN) my snyk's token
    environment{
        SNYK_TOKEN=credentials('snykToken')
    }



    stages {
        stage('Test') {
           parallel {
                   stage('pytest'){
                        steps{
                          catchError(message:'pytest ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                            withCredentials([file(credentialsId: 'telegramToken', variable: 'TOKEN_FILE')]) {
                              sh "cp ${TOKEN_FILE} .telegramToken"
                              sh 'pip3 install -r requirements.txt'
                              sh 'python3 -m pytest --junitxml results.xml tests/*.py'
                              }
                           }
                        }
                    }

           stage('pylint') {
                         steps {
                         catchError(message:'pylint ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                              script {
                                     log.info 'Starting'
                                     log.warning 'Nothing to do!'
                                     sh "python3 -m pylint *.py || true"
                                     }
                                  }
                               }
                            }
                        }
                    }


        stage('Build Bot app') {
             steps {
                   sh "docker build -t shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} . "

                   }
                 }


        stage('snyk test - Bot image') {
            steps {
                sh "snyk container test --severity-threshold=critical --policy-path=PolyBot/.snyk shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} --file=Dockerfile || true"
                  }
               }


        stage('push image to repo') {
            steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'pass', usernameVariable: 'user')]){
                   sh "docker login --username $user --password $pass"
                    sh "docker push shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER}"
              }
            }
         }

    }//close stages


        post{
          always{
            junit allowEmptyResults: true, testResults: 'results.xml'
            // sh "docker rmi shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER}"
            }

       }



}//close pipeline


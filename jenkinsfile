//library 'Jenkins-SharedLibrary@main'
//library 'shared-lib-int@main'
//@Library("shared-lib-int") _
import hudson.*;

//dict
//generic-build("snykToken","telegramToken","polybot","dockerhub")


pipeline {

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        //retry(2)
        timeout(time: 3, unit: 'MINUTES')
    }

//    agent {
//    kubernetes {

//      defaultContainer 'jenkins-agent'
      //cloud 'EKS'

//      yaml '''
//        apiVersion: v1
//        kind: Pod
//       spec:
//          serviceAccountName: jenkins-admin

//          containers:
//          - name: jenkins-agent
//            image: shaniben/shani-repo:jenkins
//            imagePullPolicy: Always
//            volumeMounts:
//             - name: jenkinsagent-pvc
//               mountPath: /var/run/docker.sock
//            tty: true
//          volumes:
//          - name: jenkinsagent-pvc
//            hostPath:
//             path: /var/run/docker.sock
//          securityContext:
//            allowPrivilegeEscalation: false
//            runAsUser: 0
//        '''
//    }
//  }



//    agent {label 'ec2-fleet' }


//    agent{
//        docker{
//              image 'jenkins-agent:latest'
//              args  '--user root -v /var/run/docker.sock:/var/run/docker.sock'
//               }
//    }


    //insert credential to environment variable
    //insert to specific environment variable (must this name: SNYK_TOKEN) my snyk's token
    environment{
        SNYK_TOKEN=credentials('snykToken')
    }


    agent any

    stages {
        stage('Build Docker Agent Image') {
            steps {
                script {
                    // Dockerfile content to create the agent image
                    def dockerfileContent = '''

                        FROM amazonlinux:2 as installer
                        RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        RUN yum update -y \
                          && yum install -y unzip \
                          && unzip awscliv2.zip \
                          && ./aws/install --bin-dir /aws-cli-bin/

                        RUN mkdir /snyk && cd /snyk \
                            && curl https://static.snyk.io/cli/v1.666.0/snyk-linux -o snyk \
                            && chmod +x ./snyk

                        #FROM jenkins/jnlp-agent-python
                        FROM jenkins/agent
                        COPY --from=docker /usr/local/bin/docker /usr/local/bin/
                        COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
                        COPY --from=installer /aws-cli-bin/ /usr/local/bin/
                        COPY --from=installer /snyk/ /usr/local/bin/
                        COPY --from=installer /snyk/ /usr/bin/
                        USER root
                        RUN apt-get update && apt-get install -y python3 python3-pip
                        USER jenkins
                        CMD ["echo", "Jenkins agent container is ready"]
                    '''

                    // Create a Dockerfile
                    writeFile file: 'jenkinsAgent.Dockerfile', text: dockerfileContent

                    // Build the Docker image using Docker commands in the pipeline
                    sh "docker build -t my-jenkins-agent:latest ."
                }
            }
        }
    }



    agent{
        docker{
              image 'my-jenkins-agent:latest'
              args  '--user root -v /var/run/docker.sock:/var/run/docker.sock'
               }
    }








//    stages {
        stage('Test') {
           parallel {
                   stage('pytest'){
                        steps{
                          catchError(message:'pytest ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                            withCredentials([file(credentialsId: 'telegramToken', variable: 'TOKEN_FILE')]) {
                              sh "cp ${TOKEN_FILE} .telegramToken"
                              sh 'pip3 install -r requirements.txt'
                              sh 'python3 -m pytest --junitxml results.xml tests/*.py'
                              }
                           }
                        }
                    }

                   stage('pylint') {
                        steps {
                            catchError(message:'pylint ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                                script {
                                    log.info 'Starting'
                                    log.warning 'Nothing to do!'
                                    sh "python3 -m pylint *.py || true"
                                       }
                                  }
                               }
                            }
                        }
                    }




        //build
        stage('Build Bot app') {
             steps {
                   sh "docker build -t shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} . "

                   }
                 }


        //stage('Build Bot app') {
        //     steps {
        //          sh "docker build -t shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} . "
        //          sh "docker tag shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER}"

        //           }
        //         }




        //snyk test for an image which saved in DockerHub
        stage('snyk test - Bot image') {
            steps {
                sh "snyk container test --severity-threshold=critical --policy-path=PolyBot/.snyk shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} --file=Dockerfile || true"
                  }
               }


        //snyk test for an image which saved in ECR
        //stage('snyk test - Bot image') {
        //    steps {
        //        sh "snyk container test --severity-threshold=critical --policy-path=PolyBot/.snyk 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} --file=Dockerfile || true"
        //          }
        //       }




        stage('push image to DockerHub repo') {
            steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'pass', usernameVariable: 'user')]){
                   sh "docker login --username $user --password $pass"
                   sh "docker push shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER}"
              }
            }
         }

        //stage('push image to ECR repo') {
        //    steps {
        //       withEnv (["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}" , "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}" , "AWS_REGION=${env.AWS_REGION}"]){
        //            sh 'docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 019273956931.dkr.ecr.eu-west-1.amazonaws.com'
        //            sh "docker push 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER}"

        //       }
        //    }
        // }

    }//close stages

        post{
          always{
            junit allowEmptyResults: true, testResults: 'results.xml'
            sh "docker rmi shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER}"
            }


       }




}//close pipeline
